// Code generated by sqlc. DO NOT EDIT.
// source: merchant.sql

package merchant

import (
	"context"

	"github.com/jackc/pgtype"
)

const addMerchant = `-- name: AddMerchant :one
INSERT INTO merchants (
  full_name,
  url,
  partner_id
) VALUES (
  $1, 
  $2,
  $3
)
RETURNING id, create_time, full_name, url, partner_id
`

type AddMerchantParams struct {
	FullName  string
	Url       string
	PartnerID pgtype.UUID
}

func (q *Queries) AddMerchant(ctx context.Context, arg AddMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, addMerchant, arg.FullName, arg.Url, arg.PartnerID)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.PartnerID,
	)
	return i, err
}

const addPartner = `-- name: AddPartner :one
INSERT INTO partners (
  full_name,
  url,
  role
) VALUES (
  $1, 
  $2,
  $3
)
RETURNING id, create_time, full_name, url, api_token, role
`

type AddPartnerParams struct {
	FullName string
	Url      string
	Role     Role
}

func (q *Queries) AddPartner(ctx context.Context, arg AddPartnerParams) (Partner, error) {
	row := q.db.QueryRowContext(ctx, addPartner, arg.FullName, arg.Url, arg.Role)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.ApiToken,
		&i.Role,
	)
	return i, err
}

const addShop = `-- name: AddShop :one
INSERT INTO shops (
  full_name,
  url,
  merchant_id,
  login,
  password
) VALUES (
  $1, 
  $2,
  $3,
  $4,
  $5
)
RETURNING id, create_time, full_name, merchant_id, login, password, url
`

type AddShopParams struct {
	FullName   string
	Url        string
	MerchantID pgtype.UUID
	Login      string
	Password   string
}

func (q *Queries) AddShop(ctx context.Context, arg AddShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, addShop,
		arg.FullName,
		arg.Url,
		arg.MerchantID,
		arg.Login,
		arg.Password,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.MerchantID,
		&i.Login,
		&i.Password,
		&i.Url,
	)
	return i, err
}

const addTerminal = `-- name: AddTerminal :one
INSERT INTO terminals (
  full_name,
  url,
  shop_id,
  login,
  password
) VALUES (
  $1, 
  $2,
  $3,
  $4,
  $5
)
RETURNING id, create_time, full_name, shop_id, login, password, url
`

type AddTerminalParams struct {
	FullName string
	Url      string
	ShopID   pgtype.UUID
	Login    string
	Password string
}

func (q *Queries) AddTerminal(ctx context.Context, arg AddTerminalParams) (Terminal, error) {
	row := q.db.QueryRowContext(ctx, addTerminal,
		arg.FullName,
		arg.Url,
		arg.ShopID,
		arg.Login,
		arg.Password,
	)
	var i Terminal
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.ShopID,
		&i.Login,
		&i.Password,
		&i.Url,
	)
	return i, err
}

const auth = `-- name: Auth :one
SELECT
  p.id as partner_id, p.full_name as partner_full_name, p.url as partner_url, p.role as partner_role,
	m.id as merchant_id, m.full_name as merchant_full_name, m.url as merchant_url, 
	s.id as shop_id, s.full_name as shop_full_name, s.url as shop_url,
	t.id as terminal_id, t.full_name as terminal_full_name, t.url as terminal_url, t.login as termnal_login
FROM 
	terminals t, shops s, merchants m, partners p
WHERE
	t.shop_id=s.id 
AND
	s.merchant_id=m.id
AND 
	m.partner_id=p.id
AND
	t.login=$1
AND
	t.password=$2
LIMIT 1
`

type AuthParams struct {
	Login    string
	Password string
}

type AuthRow struct {
	PartnerID        pgtype.UUID
	PartnerFullName  string
	PartnerUrl       string
	PartnerRole      Role
	MerchantID       pgtype.UUID
	MerchantFullName string
	MerchantUrl      string
	ShopID           pgtype.UUID
	ShopFullName     string
	ShopUrl          string
	TerminalID       pgtype.UUID
	TerminalFullName string
	TerminalUrl      string
	TermnalLogin     string
}

func (q *Queries) Auth(ctx context.Context, arg AuthParams) (AuthRow, error) {
	row := q.db.QueryRowContext(ctx, auth, arg.Login, arg.Password)
	var i AuthRow
	err := row.Scan(
		&i.PartnerID,
		&i.PartnerFullName,
		&i.PartnerUrl,
		&i.PartnerRole,
		&i.MerchantID,
		&i.MerchantFullName,
		&i.MerchantUrl,
		&i.ShopID,
		&i.ShopFullName,
		&i.ShopUrl,
		&i.TerminalID,
		&i.TerminalFullName,
		&i.TerminalUrl,
		&i.TermnalLogin,
	)
	return i, err
}

const deleteMerchant = `-- name: DeleteMerchant :one
DELETE FROM merchants
WHERE id = $1
RETURNING id, create_time, full_name, url, partner_id
`

func (q *Queries) DeleteMerchant(ctx context.Context, id pgtype.UUID) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, deleteMerchant, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.PartnerID,
	)
	return i, err
}

const deletePartner = `-- name: DeletePartner :one
DELETE FROM partners
WHERE id = $1
RETURNING id, create_time, full_name, url, api_token, role
`

func (q *Queries) DeletePartner(ctx context.Context, id pgtype.UUID) (Partner, error) {
	row := q.db.QueryRowContext(ctx, deletePartner, id)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.ApiToken,
		&i.Role,
	)
	return i, err
}

const deleteShop = `-- name: DeleteShop :one
DELETE FROM shops
WHERE id = $1
RETURNING id, create_time, full_name, merchant_id, login, password, url
`

func (q *Queries) DeleteShop(ctx context.Context, id pgtype.UUID) (Shop, error) {
	row := q.db.QueryRowContext(ctx, deleteShop, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.MerchantID,
		&i.Login,
		&i.Password,
		&i.Url,
	)
	return i, err
}

const deleteTerminal = `-- name: DeleteTerminal :one
DELETE FROM terminals
WHERE id = $1
RETURNING id, create_time, full_name, shop_id, login, password, url
`

func (q *Queries) DeleteTerminal(ctx context.Context, id pgtype.UUID) (Terminal, error) {
	row := q.db.QueryRowContext(ctx, deleteTerminal, id)
	var i Terminal
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.ShopID,
		&i.Login,
		&i.Password,
		&i.Url,
	)
	return i, err
}
